import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, Camera, MapPin, Send, CheckCircle } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { supabase } from "@/integrations/supabase/client"
import { indianStates, getCitiesByState } from "@/data/indianStatesAndCities"

interface ComplaintRegistrationProps {
  onBack: () => void
}

const ComplaintRegistration = ({ onBack }: ComplaintRegistrationProps) => {
  const [step, setStep] = useState<'form' | 'success'>('form')
  const [complaintId, setComplaintId] = useState<string>('')
  const { toast } = useToast()

  const [formData, setFormData] = useState({
    state: '',
    city: '',
    district: '',
    issueType: '',
    description: '',
    media: null as File | null,
    gpsLocation: null as { lat: number; lng: number } | null,
    addressLine1: '',
    addressLine2: ''
  })

  const [availableCities, setAvailableCities] = useState<string[]>([])
  const [isAnalyzing, setIsAnalyzing] = useState(false)

  const issueTypes = [
    { value: 'Electricity', label: '‚ö° Electricity', category: 'Utilities' },
    { value: 'Water Supply', label: 'üíß Water Supply', category: 'Utilities' },
    { value: 'Garbage Collection', label: 'üóëÔ∏è Garbage Collection', category: 'Sanitation' },
    { value: 'Road Repair', label: 'üï≥Ô∏è Road Repair', category: 'Infrastructure' },
    { value: 'Street Light', label: 'üî¶ Street Light', category: 'Infrastructure' },
    { value: 'Public Transport', label: 'üöå Public Transport', category: 'Transport' },
    { value: 'Noise Pollution', label: 'üîä Noise Pollution', category: 'Environment' },
    { value: 'Others', label: 'üìù Others', category: 'General' }
  ]

  const handleStateChange = (state: string) => {
    setFormData(prev => ({ ...prev, state, city: '', district: '' }))
    setAvailableCities(getCitiesByState(state))
  }

  const handleSubmit = async () => {
    if (!formData.state || !formData.city || !formData.issueType || !formData.description) {
      toast({
        title: "Missing Information",
        description: "Please fill all required fields",
        variant: "destructive"
      })
      return
    }

    try {
      let mediaUrl = null

      // Upload media if provided
      if (formData.media) {
        const fileExt = formData.media.name.split('.').pop()
        const fileName = `${Date.now()}.${fileExt}`
        
        const { data: uploadData, error: uploadError } = await supabase.storage
          .from('complaints')
          .upload(fileName, formData.media)

        if (uploadError) throw uploadError
        
        const { data: { publicUrl } } = supabase.storage
          .from('complaints')
          .getPublicUrl(fileName)
        
        mediaUrl = publicUrl
      }

      // Auto-assign worker based on issue type
      const { data: assignedWorkerId } = await supabase
        .rpc('auto_assign_worker', { issue_type_param: formData.issueType })

      // Insert complaint (complaint_code is auto-generated by trigger)
      const { data, error } = await supabase
        .from('complaints')
        .insert({
          state: formData.state,
          city: formData.city, 
          issue_type: formData.issueType,
          description: formData.description,
          severity_description: formData.description, // AI-generated description stored here
          media_url: mediaUrl,
          gps_latitude: formData.gpsLocation?.lat,
          gps_longitude: formData.gpsLocation?.lng,
          address_line1: formData.addressLine1,
          address_line2: formData.addressLine2,
          status: assignedWorkerId ? 'In-Progress' : 'Registered',
          assigned_to: assignedWorkerId
        } as any)
        .select('id, complaint_code')
        .single()

      if (error) throw error

      // Insert status update if worker assigned
      if (assignedWorkerId) {
        await supabase
          .from('complaint_status_updates')
          .insert({
            complaint_id: data.id,
            status: 'In-Progress',
            note: 'Complaint auto-assigned to worker'
          })
      }

      setComplaintId(data.complaint_code)
      setStep('success')
      
      toast({
        title: "Report Submitted Successfully! üéâ",
        description: `Complaint ID: ${data.complaint_code}`,
        variant: "default"
      })
    } catch (error) {
      console.error('Error submitting complaint:', error)
      toast({
        title: "Submission Failed",
        description: "Please try again later",
        variant: "destructive"
      })
    }
  }

  const handleMediaUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      setFormData(prev => ({ ...prev, media: file }))
      
      // Get GPS location
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            setFormData(prev => ({
              ...prev,
              gpsLocation: {
                lat: position.coords.latitude,
                lng: position.coords.longitude
              }
            }))
            toast({
              title: "Location Captured",
              description: "GPS coordinates recorded",
              variant: "default"
            })
          },
          (error) => {
            console.log('GPS error:', error)
            toast({
              title: "Location Access",
              description: "Unable to capture GPS location",
              variant: "destructive"
            })
          }
        )
      }

      // Auto-analyze media with AI if it's an image
      if (file.type.startsWith('image/')) {
        await analyzeMediaWithAI(file)
      }

      toast({
        title: "Media Uploaded",
        description: "Photo/video attached successfully",
        variant: "default"
      })
    }
  }

  const analyzeMediaWithAI = async (file: File) => {
    setIsAnalyzing(true)
    try {
      // Upload file to get URL for AI analysis
      const fileExt = file.name.split('.').pop()
      const fileName = `temp_${Date.now()}.${fileExt}`
      
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('complaints')
        .upload(fileName, file)

      if (uploadError) throw uploadError
      
      const { data: { publicUrl } } = supabase.storage
        .from('complaints')
        .getPublicUrl(fileName)

      // Call AI analysis function
      const { data: analysisResult, error: analysisError } = await supabase.functions.invoke('analyze-media', {
        body: { 
          mediaUrl: publicUrl,
          issueType: formData.issueType 
        }
      })

      if (analysisError) throw analysisError

      if (analysisResult.success && analysisResult.description) {
        setFormData(prev => ({ 
          ...prev, 
          description: analysisResult.description 
        }))
        
        toast({
          title: "AI Analysis Complete",
          description: "Description auto-generated from image",
          variant: "default"
        })
      }

      // Clean up temp file
      await supabase.storage
        .from('complaints')
        .remove([fileName])

    } catch (error) {
      console.error('AI analysis error:', error)
      toast({
        title: "AI Analysis Failed",
        description: "Please enter description manually",
        variant: "destructive"
      })
    } finally {
      setIsAnalyzing(false)
    }
  }

  if (step === 'success') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-civic-green-light to-background p-6">
        <div className="max-w-md mx-auto pt-8">
          <Card className="border-civic-green border-2 shadow-success">
            <CardContent className="p-8 text-center">
              <div className="mb-6">
                <CheckCircle className="h-20 w-20 text-civic-green mx-auto mb-4" />
                <h2 className="text-2xl font-bold text-civic-green mb-2">
                  Report Submitted Successfully! üéâ
                </h2>
              </div>

              <div className="bg-civic-green/10 rounded-lg p-4 mb-6">
                <p className="text-sm text-muted-foreground mb-2">Your Complaint ID</p>
                <p className="text-2xl font-bold text-civic-green font-mono">{complaintId}</p>
              </div>

              <div className="bg-gradient-to-r from-civic-saffron/10 to-civic-green/10 rounded-lg p-4 mb-6">
                <p className="font-semibold text-civic-saffron text-lg mb-2">
                  üôè You are a Responsible Citizen of India
                </p>
                <p className="font-bold text-civic-green">
                  Truly a Nagar Rakshak!
                </p>
              </div>

              <div className="space-y-3">
                <Button 
                  variant="civic" 
                  size="lg" 
                  className="w-full"
                  onClick={() => onBack()}
                >
                  Track This Complaint
                </Button>
                
                <Button 
                  variant="outline" 
                  size="lg" 
                  className="w-full"
                  onClick={() => {
                    setStep('form')
                    setFormData({
                      state: '',
                      city: '',
                      district: '',
                      issueType: '',
                      description: '',
                      media: null,
                      gpsLocation: null,
                      addressLine1: '',
                      addressLine2: ''
                    })
                  }}
                >
                  Register New Complaint
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-civic-orange-light to-background">
      {/* Header */}
      <div className="bg-white/90 backdrop-blur-sm shadow-sm border-b border-civic-saffron/20">
        <div className="flex items-center p-4 max-w-md mx-auto">
          <Button variant="ghost" size="icon" onClick={onBack} className="mr-3">
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <h1 className="text-xl font-semibold">Register New Complaint</h1>
        </div>
      </div>

      <div className="p-6 max-w-md mx-auto">
        <Card className="shadow-lg border-civic-saffron/20">
          <CardHeader className="bg-gradient-to-r from-civic-saffron/5 to-civic-green/5">
            <CardTitle className="flex items-center gap-2">
              <MapPin className="h-5 w-5 text-civic-saffron" />
              Issue Details
            </CardTitle>
          </CardHeader>
          
          <CardContent className="p-6 space-y-6">
            {/* Location */}
            <div className="space-y-4">
              <div>
                <Label htmlFor="state">State / UT *</Label>
                <Select value={formData.state} onValueChange={handleStateChange}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select your state" />
                  </SelectTrigger>
                  <SelectContent>
                    {indianStates.map(state => (
                      <SelectItem key={state} value={state}>{state}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="city">City *</Label>
                <Select 
                  value={formData.city} 
                  onValueChange={(value) => setFormData(prev => ({...prev, city: value}))}
                  disabled={!formData.state}
                >
                  <SelectTrigger>
                    <SelectValue placeholder={formData.state ? "Select your city" : "Please select state first"} />
                  </SelectTrigger>
                  <SelectContent>
                    {availableCities.map(city => (
                      <SelectItem key={city} value={city}>{city}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="district">District (Optional*)</Label>
                <Input 
                  placeholder="Enter district name (if applicable)"
                  value={formData.district}
                  onChange={(e) => setFormData(prev => ({...prev, district: e.target.value}))}
                />
              </div>
            </div>

            {/* Issue Type */}
            <div>
              <Label>Issue Type *</Label>
              <Select value={formData.issueType} onValueChange={(value) => setFormData(prev => ({...prev, issueType: value}))}>
                <SelectTrigger>
                  <SelectValue placeholder="Select issue type" />
                </SelectTrigger>
                <SelectContent>
                  {issueTypes.map(issue => (
                    <SelectItem key={issue.value} value={issue.value}>
                      <div className="flex items-center justify-between w-full">
                        <span>{issue.label}</span>
                        <Badge variant="secondary" className="ml-2">{issue.category}</Badge>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Media Upload - Enhanced with GPS and Address */}
            <div>
              <Label>Upload Photo/Video (Optional)</Label>
              <div className="border-2 border-dashed border-civic-saffron/30 rounded-lg p-4 text-center hover:border-civic-saffron/50 transition-colors">
                <input
                  type="file"
                  accept="image/*,video/*"
                  onChange={handleMediaUpload}
                  className="hidden"
                  id="media-upload"
                />
                <label htmlFor="media-upload" className="cursor-pointer">
                  <Camera className="h-8 w-8 text-civic-saffron mx-auto mb-2" />
                  <p className="text-sm text-muted-foreground">
                    {formData.media ? formData.media.name : 'Tap to add photo or video'}
                  </p>
                  <p className="text-xs text-civic-saffron mt-1">
                    GPS location and AI analysis will be automatically applied
                  </p>
                  {isAnalyzing && (
                    <p className="text-xs text-blue-600 mt-1 font-medium">
                      ü§ñ AI analyzing image...
                    </p>
                  )}
                </label>
              </div>

              {/* GPS Location Display */}
              {formData.gpsLocation && (
                <div className="mt-2 p-2 bg-green-50 rounded text-xs">
                  üìç GPS: {formData.gpsLocation.lat.toFixed(6)}, {formData.gpsLocation.lng.toFixed(6)}
                </div>
              )}

              {/* Address Fields */}
              <div className="mt-4 space-y-3">
                <div>
                  <Label htmlFor="address1">Address Line 1 (Optional)</Label>
                  <Input 
                    id="address1"
                    placeholder="Street address, building name, etc."
                    value={formData.addressLine1}
                    onChange={(e) => setFormData(prev => ({...prev, addressLine1: e.target.value}))}
                  />
                </div>
                <div>
                  <Label htmlFor="address2">Address Line 2 (Optional)</Label>
                  <Input 
                    id="address2"
                    placeholder="Landmark, area, etc."
                    value={formData.addressLine2}
                    onChange={(e) => setFormData(prev => ({...prev, addressLine2: e.target.value}))}
                  />
                </div>
              </div>
            </div>

            {/* Description - Enhanced with AI auto-generation */}
            <div>
              <Label htmlFor="description">Detailed Description *</Label>
              <Textarea 
                placeholder={isAnalyzing ? "AI is analyzing your image..." : "Describe the issue in detail or let AI analyze your uploaded image..."}
                rows={4}
                value={formData.description}
                onChange={(e) => setFormData(prev => ({...prev, description: e.target.value}))}
                disabled={isAnalyzing}
              />
              <p className="text-xs text-muted-foreground mt-1">
                üì± Tip: Upload an image first for AI-powered description generation
              </p>
            </div>

            <Button 
              variant="civic" 
              size="xl" 
              className="w-full"
              onClick={handleSubmit}
            >
              <Send className="h-5 w-5 mr-2" />
              Submit Report
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

export default ComplaintRegistration